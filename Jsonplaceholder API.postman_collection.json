{
	"info": {
		"_postman_id": "2c5a28d0-a16f-498b-ac85-3d42f032f194",
		"name": "Jsonplaceholder API",
		"description": "Tai yra visų request rinkinys\n\nJei norime ištestuoti kiekvieną request, testus turime rašyti kolekcijoje.\n\nScripts tab'e",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41079087"
	},
	"item": [
		{
			"name": "Posts",
			"item": [
				{
					"name": "AllPosts",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Testuoju request laika\r",
									"// 100ms ir 1000ms\r",
									"\r",
									"//pm objektas/kintamasis Postman, irankiu objektas\r",
									"//metodas test() - atliekamas musu aprasytas testas\r",
									"\r",
									"pm.test(\"Ar request laikas maziau nei 300ms ?\", function(){\r",
									"    // pm.response.\r",
									"    //iki 500ms\r",
									"    //programavime naudojamas ms formatas\r",
									"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
									"});\r",
									"\r",
									"// pm.test(\"Response laikas tarp 100ms ir 1000ms?\", function(){\r",
									"//     pm.expect(pm.response.responseTime).to.be.within(100,1000);\r",
									"// });\r",
									"\r",
									"//200 arba 201\r",
									"pm.test(\"Status code is 2xx\", function () {\r",
									"    // pm.response.to.have.status(200);\r",
									"    pm.expect(pm.response.code).to.be.within(200,203); // nuo 200 iki 203\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Status code is 202\", function () {\r",
									"    pm.response.to.have.status(202);\r",
									"});\r",
									"pm.test(\"Status code is 203\", function () {\r",
									"    pm.response.to.have.status(203);\r",
									"});\r",
									"\r",
									"//patikrinti ar response body yra JSOn formato. Snipeto nera\r",
									"\r",
									"pm.test(\"Body JSON formato?\", function() {\r",
									"    //body yra json formato\r",
									"    //1. tikrinam content-type headeri\r",
									"    //2. visa body, su elementariosiomis javascript funckijomis patikrinti\r",
									"    //  pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    // pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    pm.response.to.be.json;//teisingas, deprecated\r",
									"    // pm.response.to.be.xml ??? neveikia\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is present\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\");\r",
									"});\r",
									"\r",
									"\r",
									"//POST 201, 202\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([201, 202]);\r",
									"});\r",
									"\r",
									"//Cypress, Playwright, \r",
									"//Selenium bendras testavimo įrankis, naršyklė web puslapiams\r",
									"//Appium - testaavimo įrankis mobiliom aplikacijom\r",
									"// Selenium(Appium) - programininiai įrankiai, rankiniam ir automatiniam testavimui\r",
									"\r",
									"//Jenkins - serveris/įrankis automatizuoti testus\r",
									"//1. Apsirašom testus\r",
									"//2. Išsiųsti užklausą, kad suveiktų testai.\r",
									"//3. Testavimo rezultatus\r",
									"//API yra nemūsų. Šitas API nuo vakar galėjo pasikeisti.\r",
									"//4. Nustatyti testavimo tvarkaraštį.(Smoke testavimas)\r",
									"//5. API testavimui, paruošiam šiuos testus, programuotojai programuoja, įmesdami pakeitimus į produkto atnaujimus, automatiškai suveikia\r",
									"//mūsų aprašyti testai. Jenkins\r",
									"\r",
									"//Problemos testavimo\r",
									"//1. Testas veikia tik ant vieno request\r",
									"//2. Reikia pagalvoti, kurie testai yra universalūs(tinka visiems requests), o kurie specifiniai\r",
									"\r",
									"\r",
									"// let a = 100;\r",
									"// let b = 1000;\r",
									"\r",
									"// if(pm.response.responseTime > a && pm.response.responseTime < b ) {\r",
									"// console.log('testas praeitas')\r",
									"// }\r",
									"\r",
									"// Visiems requestams praleisti vieną vienintelį testą. Laiko testas.\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							]
						}
					},
					"response": []
				},
				{
					"name": "/posts/1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/45",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"45"
							]
						}
					},
					"response": []
				},
				{
					"name": "NewPost",
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{ \r\n    \"title\": \"foo\",\r\n    \"body\": \"bar\",\r\n    \"userId\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts"
							],
							"query": [
								{
									"key": "kintamasis",
									"value": "12",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdatePost",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var template = `\r",
									"<style type=\"text/css\">\r",
									"    .tftable {font-size:14px;color:#333333;width:100%;border-width: 1px;border-color: #87ceeb;border-collapse: collapse;}\r",
									"    .tftable th {font-size:18px;background-color:#87ceeb;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;text-align:left;}\r",
									"    .tftable tr {background-color:#ffffff;}\r",
									"    .tftable td {font-size:14px;border-width: 1px;padding: 8px;border-style: solid;border-color: #87ceeb;}\r",
									"    .tftable tr:hover {background-color:#e0ffff;}\r",
									"</style>\r",
									"\r",
									"<table class=\"tftable\" border=\"1\">\r",
									"    <tr>\r",
									"        <th>ID</th>\r",
									"        <th>Title</th>\r",
									"        <th>Body</th>\r",
									"        <th>User ID</th>\r",
									"    </tr>\r",
									"    <tr>\r",
									"        <td>{{response.id}}</td>\r",
									"        <td>{{response.title}}</td>\r",
									"        <td>{{response.body}}</td>\r",
									"        <td>{{response.userId}}</td>\r",
									"    </tr>\r",
									"</table>\r",
									"`;\r",
									"\r",
									"function constructVisualizerPayload() {\r",
									"    return {response: pm.response.json()}\r",
									"}\r",
									"\r",
									"pm.visualizer.set(template, constructVisualizerPayload());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"id\": 1,\r\n    \"title\": \"foo\",\r\n    \"body\": \"bar\",\r\n    \"userId\": 1  \r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchPost",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"title\": \"test\",\r\n    \"body\": null\r\n  }",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "GettingHtmlOfGuide",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Body JSON formato?\", function() {\r",
									"    //body yra json formato\r",
									"    //1. tikrinam content-type headeri\r",
									"    //2.\r",
									"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"\r",
									"});\r",
									"\r",
									"pm.test(\"Body JSON formato?\", function() {\r",
									"    //body yra json formato\r",
									"    //1. tikrinam content-type headeri\r",
									"    //2. visa body, su elementariosiomis javascript funckijomis patikrinti\r",
									"    // pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/guide/",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"guide",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "DeletePost",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/posts/2000",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"posts",
								"2000"
							]
						}
					},
					"response": []
				},
				{
					"name": "Style.css",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/style.css",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"style.css"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Comments",
			"item": [
				{
					"name": "/comments/1",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/comments/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"comments",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Albums",
			"item": [
				{
					"name": "AllAlbums",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/albums",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"albums"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Photos",
			"item": []
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "AllUsers",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetUser",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "NewUser",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test test\",\r\n    \"username\": \"Bret\",\r\n    \"email\": \"Sincere@april.biz\",\r\n    \"address\": {\r\n        \"street\": \"Kulas Light\",\r\n        \"suite\": \"Apt. 556\",\r\n        \"city\": \"Gwenborough\",\r\n        \"zipcode\": \"92998-3874\",\r\n        \"geo\": {\r\n            \"lat\": \"-37.3159\",\r\n            \"lng\": \"81.1496\"\r\n        }\r\n    },\r\n    \"phone\": \"1-770-736-8031 x56442\",\r\n    \"website\": \"hildegard.org\",\r\n    \"company\": {\r\n        \"name\": \"Romaguera-Crona\",\r\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n        \"bs\": \"harness real-time e-markets\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateUser",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": 1,\r\n    \"name\": \"test test\",\r\n    \"username\": \"Bret\",\r\n    \"email\": \"Sincere@april.biz\",\r\n    \"address\": {\r\n        \"street\": \"Kulas Light\",\r\n        \"suite\": \"Apt. 556\",\r\n        \"city\": \"Gwenborough\",\r\n        \"zipcode\": \"92998-3874\",\r\n        \"geo\": {\r\n            \"lat\": \"-37.3159\",\r\n            \"lng\": \"81.1496\"\r\n        }\r\n    },\r\n    \"phone\": \"1-770-736-8031 x56442\",\r\n    \"website\": \"hildegard.org\",\r\n    \"company\": {\r\n        \"name\": \"Romaguera-Crona\",\r\n        \"catchPhrase\": \"Multi-layered client-server neural-net\",\r\n        \"bs\": \"harness real-time e-markets\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "PatchUser",
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"test test\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "https://jsonplaceholder.typicode.com/users/1",
							"protocol": "https",
							"host": [
								"jsonplaceholder",
								"typicode",
								"com"
							],
							"path": [
								"users",
								"1"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Todos",
			"item": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"// Tikrinti kiekvieno request laiką\r",
					"pm.test(\"Response time is less than 200ms\", function () {\r",
					"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "json_placeholder",
			"value": "100",
			"type": "string"
		}
	]
}